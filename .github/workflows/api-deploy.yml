name: API - Build/Deploy

on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*'
    paths:
      - 'api/**'
      - 'sql/**'
      - './Dockerfile'
      - '.github/workflows/api-deploy.yml'
      - 'test/**'
  workflow_dispatch:
jobs:
  APIDockerImage:
    name: API Image
    needs: [unit-tests,functional-tests]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      # BUILD_IMAGE: Name of image to build
      BUILD_IMAGE: water-api:latest
      # ECR_REPOSITORY: Name of ECR Repository for Built Images
      ECR_REPOSITORY: water-api
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        if: ${{ always() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CASTLECI_DEVELOP_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CASTLECI_DEVELOP_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.CASTLECI_DEVELOP_AWS_REGION }}

      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build Image
        run: docker build -t $BUILD_IMAGE .

      - name: Deploy Develop
        if: github.ref_type == 'branch'
        env:
          TAG: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:develop
        run: |
          docker tag $BUILD_IMAGE $TAG
          docker push $TAG
      
      - name: Deploy Stable
        if: github.ref_type == 'tag'
        env:
          TAG: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:stable
        run: |
          docker tag $BUILD_IMAGE $TAG
          docker push $TAG

      - name: Logout of Amazon ECR
        if: ${{ always() }}
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
